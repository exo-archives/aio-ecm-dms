Index: core/component/cms/src/main/java/org/exoplatform/services/cms/link/LinkUtils.java
===================================================================
--- core/component/cms/src/main/java/org/exoplatform/services/cms/link/LinkUtils.java	(revision 61729)
+++ core/component/cms/src/main/java/org/exoplatform/services/cms/link/LinkUtils.java	(working copy)
@@ -16,8 +16,22 @@
  */
 package org.exoplatform.services.cms.link;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.jcr.Node;
+import javax.jcr.NodeIterator;
+import javax.jcr.Session;
+import javax.jcr.query.Query;
+import javax.jcr.query.QueryManager;
+import javax.jcr.query.QueryResult;
+
 import org.exoplatform.container.ExoContainer;
 import org.exoplatform.container.ExoContainerContext;
+import org.exoplatform.portal.webui.util.SessionProviderFactory;
+import org.exoplatform.services.jcr.RepositoryService;
+import org.exoplatform.services.jcr.core.ManageableRepository;
+import org.exoplatform.services.jcr.ext.common.SessionProvider;
 
 /**
  * Created by The eXo Platform SAS
@@ -32,6 +46,8 @@
    * @param path the path to convert
    * @return the real absolute path
    */
+  private static final String EXO_SYMLINK = "exo:symlink";
+  
   public static String evaluatePath(String path) {
     if (!path.startsWith("/")) {
       throw new IllegalArgumentException("The path '" + path +  "' must be an absolute path");
@@ -176,4 +192,36 @@
     }
     return path;
   }
+  
+  public static List<Node> getAllSymlinks(Node targetNode, String repoName) throws Exception {
+    List<Node> result = new ArrayList<Node>();
+    ExoContainer myContainer = ExoContainerContext.getCurrentContainer();
+    RepositoryService repositoryService =(RepositoryService)myContainer.getComponentInstanceOfType(RepositoryService.class);
+    ManageableRepository repository  = repositoryService.getRepository(repoName);
+    String[] workspaces = repository.getWorkspaceNames();
+    String systemWS = 
+      repository.getConfiguration().getSystemWorkspaceName();
+    String queryString = new StringBuilder().append("SELECT * FROM ").
+                                             append(EXO_SYMLINK).
+                                             append(" WHERE exo:uuid='").
+                                             append(targetNode.getUUID()).append("'").
+                                             append(" AND exo:workspace='").
+                                             append(targetNode.getSession().getWorkspace().getName()).
+                                             append("'").toString();
+    
+    for (String workspace : workspaces) {
+      SessionProvider sessionProvider = workspace.equals(systemWS) ? SessionProviderFactory.createSystemProvider() 
+                                                                   : SessionProviderFactory.createSessionProvider();
+      Session session = sessionProvider.getSession(workspace, repository);
+      QueryManager queryManager = session.getWorkspace().getQueryManager();
+      Query query = queryManager.createQuery(queryString, Query.SQL);
+      QueryResult queryResult = query.execute();
+      NodeIterator iter = queryResult.getNodes();
+      while (iter.hasNext()) {
+        result.add(iter.nextNode());
+      }
+    }        
+    return result;
+  }
+  
 }
Index: core/portlet/ecm/core/main/src/main/java/org/exoplatform/ecm/webui/component/explorer/popup/info/UIPermissionForm.java
===================================================================
--- core/portlet/ecm/core/main/src/main/java/org/exoplatform/ecm/webui/component/explorer/popup/info/UIPermissionForm.java	(revision 61729)
+++ core/portlet/ecm/core/main/src/main/java/org/exoplatform/ecm/webui/component/explorer/popup/info/UIPermissionForm.java	(working copy)
@@ -22,6 +22,11 @@
 
 import javax.jcr.AccessDeniedException;
 import javax.jcr.Node;
+import javax.jcr.NodeIterator;
+import javax.jcr.Session;
+import javax.jcr.query.Query;
+import javax.jcr.query.QueryManager;
+import javax.jcr.query.QueryResult;
 
 import org.exoplatform.ecm.webui.component.explorer.UIDrivesBrowserContainer;
 import org.exoplatform.ecm.webui.component.explorer.UIJCRExplorer;
@@ -30,10 +35,13 @@
 import org.exoplatform.ecm.webui.utils.PermissionUtil;
 import org.exoplatform.ecm.webui.utils.Utils;
 import org.exoplatform.services.cms.link.LinkManager;
+import org.exoplatform.services.cms.link.LinkUtils;
 import org.exoplatform.services.jcr.access.AccessControlEntry;
 import org.exoplatform.services.jcr.access.PermissionType;
 import org.exoplatform.services.jcr.access.SystemIdentity;
 import org.exoplatform.services.jcr.core.ExtendedNode;
+import org.exoplatform.services.jcr.core.ManageableRepository;
+import org.exoplatform.services.jcr.ext.common.SessionProvider;
 import org.exoplatform.services.organization.MembershipHandler;
 import org.exoplatform.services.organization.OrganizationService;
 import org.exoplatform.web.application.ApplicationMessage;
@@ -261,11 +269,12 @@
         event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages());
         return;
       }
-      Node realNode = uiExplorer.getRealCurrentNode();
       LinkManager linkManager = uiExplorer.getApplicationComponent(LinkManager.class);
-      if (linkManager.isLink(realNode)) {
-        // Reset the permissions
-        linkManager.updateLink(realNode, currentNode);
+      List<Node> symlinks = LinkUtils.getAllSymlinks(currentNode, uiExplorer.getRepositoryName());
+      for (Node symlink : symlinks) {
+        try {
+          linkManager.updateLink(symlink, currentNode);
+        } catch (Exception e) {}
       }
       currentNode.getSession().save();
       uiForm.refresh();
@@ -273,6 +282,7 @@
       event.getRequestContext().addUIComponentToUpdateByAjax(uiParent);
       uiExplorer.updateAjax(event);
     }
+    
   }
 
   static public class SelectUserActionListener extends EventListener<UIPermissionForm> {
