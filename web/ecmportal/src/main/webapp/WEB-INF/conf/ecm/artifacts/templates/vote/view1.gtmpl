<style>
	.UIVote {
    padding: 5px 2px 2px 2px;
	}
	
  .UIVote .VoteResultContainer {
    margin-left: auto;
    padding-right: 8px;
    width: 370px;
    height: 26px;
	}
	
  .UIVote .LeftVoteBar {
    background: url('/eXoECMResources/skin/images/vote/ImageVote.gif') no-repeat left -32px;
    padding-left: 5px;
    height: 26px;
	}
	
	.UIVote .RightVoteBar {
	  background: url('/eXoECMResources/skin/images/vote/ImageVote.gif') no-repeat right -32px;
    padding-right: 5px;
    height: 26px;
	}
	
	.UIVote .CenterVoteBar {
	  height: 26px; line-height: 26px;
	  background: url('/eXoECMResources/skin/images/vote/ImageVote.gif') repeat-x left -58px;
	}

   .UIVote .VoteResultContainer .RatingInfoContainer {
		float: left;
	}
	
	.UIVote .VoteResultContainer .AvgRatingImages {
		width: 100px; 
		overflow: hidden;
		margin-left: 15px;
	}
	
	.UIVote .AvgRatingImages .Voted {
		float: left;
		width: 16px;
		height: 16px;
		background: url('/eXoECMResources/skin/images/vote/ImageVote.gif') no-repeat left top;
		margin: 5px 1px;
	}
	
	.UIVote .AvgRatingImages .Unvoted {
		float: left;
		width: 16px;
		height: 16px;
		background: url('/eXoECMResources/skin/images/vote/ImageVote.gif') no-repeat left -16px;
		margin: 5px 1px;
	}
	
	.UIVote .VoteRatingInfo {
		font: normal normal 11px verdana;
		float: left;
	  vertical-align: middle;
		padding: 0px 5px;
		margin-top: 5px;
	}
	
	.UIVote .VoteRatingInfo .VoteRatingLabel {
		margin: 0px 5px;
	}
	
	.UIVote .VoteRatingInfo .VotedInfo {
		color: #058ee6;
	}
</style>

<%
  import javax.jcr.Node;
	import javax.jcr.NodeIterator;
	
  public Node getFileLangNode(Node currentNode) throws Exception {
    if(currentNode.getNodes().getSize() > 0) {
      NodeIterator nodeIter = currentNode.getNodes() ;
      while(nodeIter.hasNext()) {
        Node ntFile = nodeIter.nextNode() ;
        if(ntFile.getPrimaryNodeType().getName().equals("nt:file")) {
          return ntFile ;
        }
      }
      return currentNode ;
    }
    return currentNode ;
  }
  
  def originalNode = uicomponent.getOriginalNode() ;
  def voteNode = uicomponent.getNode() ;
  if(originalNode.getPrimaryNodeType().getName().equals("nt:file")) {
    voteNode = getFileLangNode(voteNode) ;
  } 
  double voteRating = 0 ;
  if(voteNode.hasProperty("exo:votingRate")) voteRating = voteNode.getProperty("exo:votingRate").getDouble() ;
  long voteTotal = 0 ;
  if(voteNode.hasProperty("exo:voteTotalOfLang")) voteTotal = voteNode.getProperty("exo:voteTotalOfLang").getLong() ;
%>
<div class="UIVote">
  <div class="VoteResultContainer">
	  <div class="LeftVoteBar">
	    <div class="RightVoteBar">
	      <div class="CenterVoteBar">
					<div class="RatingInfoContainer">
					  <div class="AvgRatingImages">
					    <%
					      int i = 0;
					      while(++i <= voteRating) {
					    %>
					          <div class="Voted"><span></span></div>
					      <%
					        }
					        while(i++ <= 5) {
					      %>
					        <div class="Unvoted"><span></span></div>
					      <%}%>
						</div>
					</div>
					<div class="VoteRatingInfo">
				    <span class="VoteRatingLabel"><%=_ctx.appRes("Vote.view.label.avg-rating")%>: <span class="VotedInfo">$voteRating</span></span>
				    <span class="VoteRatingLabel"><%=_ctx.appRes("Vote.view.label.subscription")%>: <span class="VotedInfo">$voteTotal</span></span>
					</div>
					<div style="clear: left;"><span></span></div>
				</div>
		 	</div>
		</div>
	</div>
</div>